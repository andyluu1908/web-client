// Generated by typings
// Source: typings/react-relay.d.ts
declare module 'react-relay' {
  /** Declaration file generated by dts-gen */

  import * as React from 'react'
  import * as RelayRuntime from 'relay-runtime'

  module 'react-relay' {
    /*
     * An individual cached graph object.
     */
    type Record = { [key: string]: any }

    /**
     * A collection of records keyed by id.
     */
    type RecordMap = { [dataID: string]: Record | void }
    type RangeBehaviorsFunction = (
      connectionArgs: {
        [argName: string]: any
      }
    ) => string
    type RangeBehaviorsObject = {
      [key: string]: string
    }
    type RangeBehaviors = RangeBehaviorsFunction | RangeBehaviorsObject

    interface RelayVariables {
      [name: string]: any
    }

    type GraphQLTaggedNode = any

    class QueryRenderer extends React.Component<QueryProps, any> {}
    interface QueryProps extends React.ClassAttributes<QueryRenderer> {
      query?: GraphQLTaggedNode
      variables?: RelayVariables
      environment?: RelayRuntime.Environment
      render({
        error,
        props
      }: {
        error: Error
        props: any
      }): JSX.Element | null | false
      // render: (any)=>any;
    }

    function createFragmentContainer<TBase extends React.ReactType>(
      Component: TBase,
      fragmentSpec: GraphQLTaggedNode
    ): TBase

    type PayloadError = {
      message: string
      locations?: Array<{
        line: number
        column: number
      }>
    }

    type SelectorStoreUpdater = (
      store: RelayRuntime.RecordSourceSelectorProxy,
      // Actually RelayCombinedEnvironmentTypes#SelectorData, but mixed is
      // inconvenient to access deeply in product code.
      data: any
    ) => void

    type RelayMutationConfig =
      | {
          type: 'FIELDS_CHANGE'
          fieldIDs: {
            [fieldName: string]: RelayRuntime.DataID | RelayRuntime.DataID[]
          }
        }
      | {
          type: 'RANGE_ADD'
          parentName?: string
          parentID?: string
          connectionInfo?: {
            key: string
            filters?: RelayRuntime.Variables
            rangeBehavior: string
          }[]
          connectionName?: string
          edgeName: string
          rangeBehaviors?: RangeBehaviors
        }
      | {
          type: 'NODE_DELETE'
          parentName?: string
          parentID?: string
          connectionName?: string
          deletedIDFieldName: string
        }
      | {
          type: 'RANGE_DELETE'
          parentName?: string
          parentID?: string
          connectionKeys?: {
            key: string
            filters?: RelayRuntime.Variables
          }[]
          connectionName?: string
          deletedIDFieldName: string | string[]
          pathToConnection: string[]
        }
      | {
          type: 'REQUIRED_CHILDREN'
          children: any[]
        }

    type MutationConfig<T> = {
      mutation: GraphQLTaggedNode
      variables: any
      onCompleted?: (response: T, errors?: Array<PayloadError>) => void
      onError?: (error: Error) => void
      optimisticUpdater?: SelectorStoreUpdater
      optimisticResponse?: RecursivePartial<T>
      updater?: SelectorStoreUpdater
      configs?: RelayMutationConfig[]
    }

    function commitLocalUpdate(
      environment: RelayRuntime.Environment,
      updater: (T: any) => void
    ): any

    function commitMutation<T>(
      environment: RelayRuntime.Environment,
      config: MutationConfig<T>
    ): any

    type ConnectionConfig = {
      direction?: 'backward' | 'forward'
      getConnectionFromProps?: (props: Object) => any
      getFragmentVariables?: any
      getVariables: (
        props: Object,
        paginationInfo: { count: number; cursor?: string },
        fragmentVariables: RelayRuntime.Variables
      ) => RelayRuntime.Variables
      query: GraphQLTaggedNode
    }

    function createPaginationContainer<
      TBase extends React.ClassicComponentClass<any>
    >(
      Component: TBase,
      fragmentSpec: GraphQLTaggedNode,
      connectionConfig: ConnectionConfig
    ): TBase

    function createRefetchContainer<
      TBase extends React.ClassicComponentClass<any>
    >(
      Component: TBase,
      fragmentSpec: GraphQLTaggedNode,
      taggedNode: GraphQLTaggedNode
    ): TBase

    function fetchQuery(
      environment: RelayRuntime.Environment,
      taggedNode: GraphQLTaggedNode,
      variables: any,
      cacheConfig: any
    ): any

    function graphql(strings: any): void

    function requestSubscription(
      environment: RelayRuntime.Environment,
      config: any,
      ...args: any[]
    ): any
  }
}
